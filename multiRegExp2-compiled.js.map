{"version":3,"sources":["multiRegExp2.js"],"names":[],"mappings":"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","file":"multiRegExp2-compiled.js","sourcesContent":["/**\n * Created by velten on 11.02.17.\n */\n\n/**\n * Adds brackets before and after a part of string\n * @param str string the hole regex string\n * @param start int marks the position where ( should be inserted\n * @param end int marks the position where ) should be inserted\n * @param groupsAdded int defines the offset to the original string because of inserted brackets\n * @return {string}\n */\n\nfunction addGroupToRegexString(str, start, end, groupsAdded) {\n\tstart += groupsAdded*2;\n\tend += groupsAdded*2;\n\treturn str.substring(0, start) + '(' + str.substring(start, end + 1) + ')' + str.substring(end + 1);\n}\n\n/**\n * converts the given regex to a regex where all not captured string are going to be captured\n * it along sides generates a mapper which maps the original group index to the shifted group offset and\n * generates a list of groups indexes (including new generated capturing groups)\n * which have been closed before a given group index (unshifted)\n *\n * Example:\n * regexp: /a(?: )bc(def(ghi)xyz)/g => /(a(?: )bc)((def)(ghi)(xyz))/g\n * groupIndexMapper: {'1': 2, '2', 4}\n * previousGroupsForGroup: {'1': [1], '2': [1, 3]}\n *\n * @param regex RegExp\n * @return {{regexp: RegExp, groupIndexMapper: {}, previousGroupsForGroup: {}}}\n */\nfunction fillGroups(regex) {\n\tlet regexString;\n\tlet modifier;\n\tif(regex.source && regex.flags) {\n\t\tregexString = regex.source;\n\t\tmodifier = regex.flags;\n\t}\n\telse {\n\t\tregexString = regex.toString();\n\t\tmodifier = regexString.substring(regexString.lastIndexOf(regexString[0])+1); // sometimes order matters ;)\n\t\tregexString = regexString.substr(1, regex.toString().lastIndexOf(regexString[0])-1);\n\t}\n\t// regexp is greedy so it should match (? before ( right?\n\t// brackets may be not quoted by \\\n\t// closing bracket may look like: ), )+, )+?, ){1,}?, ){1,1111}?\n\tconst tester = /((?!\\\\)\\(\\?)|((?!\\\\)\\()|((?!\\\\)\\)(?:\\{\\d+,?\\d*}|[*+?])?\\??)/g;\n\n\tlet modifiedRegex = regexString;\n\n\tlet lastGroupStartPosition = -1;\n\tlet lastGroupEndPosition = -1;\n\tlet groupsAdded = 0;\n\tlet groupCount = 0;\n\tlet matchArr;\n\tconst nonGroupPositions = [];\n\tconst groupPositions = [];\n\tconst groupNumber = [];\n\tconst currentLengthIndexes = [];\n\tconst groupIndexMapper = {};\n\tconst previousGroupsForGroup = {};\n\twhile ((matchArr = tester.exec(regexString)) !== null ) {\n\t\tif(matchArr[1]) { // non capturing group\n\t\t\tlet index = matchArr.index + matchArr[0].length - 1;\n\t\t\tnonGroupPositions.push(index);\n\t\t}\n\t\telse if(matchArr[2]) { // capturing group\n\t\t\tlet index = matchArr.index + matchArr[0].length - 1;\n\t\t\tlet lastGroupPosition = Math.max(lastGroupStartPosition, lastGroupEndPosition);\n\n\t\t\tif(lastGroupPosition < index - 1) {\n\t\t\t\tmodifiedRegex = addGroupToRegexString(modifiedRegex, lastGroupPosition + 1, index - 1, groupsAdded);\n\t\t\t\tgroupsAdded++;\n\t\t\t\tlastGroupEndPosition = index - 1; // imaginary position as it is not in regex but modifiedRegex\n\t\t\t\tcurrentLengthIndexes.push(groupCount + groupsAdded);\n\t\t\t}\n\n\t\t\tgroupCount++;\n\t\t\tlastGroupStartPosition = index;\n\t\t\tgroupPositions.push(index);\n\t\t\tgroupNumber.push(groupCount + groupsAdded);\n\t\t\tgroupIndexMapper[groupCount] = groupCount + groupsAdded;\n\t\t\tpreviousGroupsForGroup[groupCount] = currentLengthIndexes.slice();\n\t\t}\n\t\telse if(matchArr[3]) { // closing bracket\n\t\t\tlet index = matchArr.index + matchArr[0].length - 1;\n\n\t\t\tif( (groupPositions.length && !nonGroupPositions.length) ||\n\t\t\t\tgroupPositions[groupPositions.length-1] > nonGroupPositions[nonGroupPositions.length-1]\n\t\t\t) {\n\t\t\t\tif(lastGroupStartPosition < lastGroupEndPosition && lastGroupEndPosition < index - 1) {\n\t\t\t\t\tmodifiedRegex = addGroupToRegexString(modifiedRegex, lastGroupEndPosition + 1, index - 1, groupsAdded);\n\t\t\t\t\tgroupsAdded++;\n\t\t\t\t\t//lastGroupEndPosition = index - 1; will be set anyway\n\t\t\t\t\tcurrentLengthIndexes.push(groupCount + groupsAdded);\n\t\t\t\t}\n\n\t\t\t\tgroupPositions.pop();\n\t\t\t\tlastGroupEndPosition = index;\n\t\t\t\tcurrentLengthIndexes.push(groupNumber.pop());\n\t\t\t}\n\t\t\telse if(nonGroupPositions.length) {\n\t\t\t\tnonGroupPositions.pop();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {regexp: new RegExp(modifiedRegex, modifier), groupIndexMapper, previousGroupsForGroup};\n}\n\nexport default class MultiRegExp2 {\n\tconstructor(baseRegExp) {\n\t\tconst {regexp, groupIndexMapper, previousGroupsForGroup} = fillGroups(baseRegExp);\n\t\tthis.regexp = regexp;\n\t\tthis.groupIndexMapper = groupIndexMapper;\n\t\tthis.previousGroupsForGroup = previousGroupsForGroup;\n\t}\n\n\texecForAllGroups(string, includeFullMatch) {\n\t\tlet matches = RegExp.prototype.exec.call(this.regexp, string);\n\t\tif(!matches) return matches;\n\t\tlet firstIndex = matches.index;\n\t\tlet indexMapper = includeFullMatch ? this.groupIndexMapper : Object.assign({0: 0}, this.groupIndexMapper);\n\t\tlet previousGroups = includeFullMatch ? this.previousGroupsForGroup : Object.assign({0: []}, this.previousGroupsForGroup);\n\n\t\treturn Object.keys(indexMapper).map((group) => {\n\t\t\tlet mapped = indexMapper[group];\n\t\t\tlet r = {\n\t\t\t\tmatch:  matches[mapped],\n\t\t\t\tstart:  firstIndex + previousGroups[group].reduce(\n\t\t\t\t\t(sum, i) => sum + (matches[i] ? matches[i].length : 0), 0\n\t\t\t\t)\n\t\t\t};\n\t\t\tr.end = r.start + (matches[mapped] ? matches[mapped].length : 0);\n\n\t\t\treturn r;\n\t\t});\n\t}\n\n\texecForGroup(string, group) {\n\t\tconst matches = RegExp.prototype.exec.call(this.regexp, string);\n\t\tif(!matches) return matches;\n\t\tconst firstIndex = matches.index;\n\n\t\tconst mapped = group == 0 ? 0 : this.groupIndexMapper[group];\n\t\tconst previousGroups = group == 0 ? [] : this.previousGroupsForGroup[group];\n\t\tlet r = {\n\t\t\tmatch:  matches[mapped],\n\t\t\tstart:  firstIndex + previousGroups.reduce(\n\t\t\t\t(sum, i) => sum + (matches[i] ? matches[i].length : 0), 0\n\t\t\t)\n\t\t};\n\t\tr.end = r.start + (matches[mapped] ? matches[mapped].length : 0);\n\n\t\treturn r;\n\t}\n}"]}